/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'Gustavo Cavero' at '6/10/15 3:53 PM' with Gradle 2.1
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/2.1/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'idea'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.12'
    compile 'org.seleniumhq.selenium:selenium-java:+'
    compile 'org.testng:testng:6.9.6'
    compile 'com.github.detro:phantomjsdriver:1.2.0'

    compile 'com.google.inject:guice:3.0'
    compile 'org.uncommons:reportng:1.1.4'
	compile 'net.sf.opencsv:opencsv:2.3'



    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}


task executeTC(type: Test) {

    useTestNG()

    testLogging {
        events "started", "passed", "failed", "skipped"
    }

    options {
        suites('src/test/resources/Suite.xml')

        listeners << 'org.testng.reporters.FailedReporter'

        listeners << 'com.selenium.course.framework.TestListener'
        listeners << 'com.selenium.course.framework.SuiteListener'
        listeners << 'com.selenium.course.framework.RetryListener'

        listeners << 'org.uncommons.reportng.HTMLReporter'
        listeners << 'org.uncommons.reportng.JUnitXMLReporter'

    }

    systemProperty 'browser', browser
    systemProperty 'primaryUserName', primaryUserName
    systemProperty 'primaryUserPassword', primaryUserPassword
    systemProperty 'groups', groups
    systemProperty 'primaryUsernameDisplayed', primaryUsernameDisplayed
    systemProperty 'timeout', timeout
    systemProperty 'sauceUser', sauceUser
    systemProperty 'sauceAccessKey', sauceAccessKey
    systemProperty 'mode', mode

    reports.html.enabled = false
    reports.junitXml.destination = 'reports'
    reports.html.destination = 'reports'
}

task executeDataDriven(type: Test){
    useTestNG()
    testLogging {
        events "started", "passed", "failed", "skipped"
    }

    options {
        suites('src/test/resources/Suite_TestDD.xml')

        listeners << 'org.testng.reporters.FailedReporter'
        listeners << 'com.selenium.course.framework.TestListener'
        listeners << 'com.selenium.course.framework.SuiteListener'
        listeners << 'com.selenium.course.framework.RetryListener'
        listeners << 'org.uncommons.reportng.HTMLReporter'
        listeners << 'org.uncommons.reportng.JUnitXMLReporter'

    }

    systemProperty 'browser', browser
    systemProperty 'primaryUserName', primaryUserName
    systemProperty 'primaryUserPassword', primaryUserPassword
    systemProperty 'groups', groups
    systemProperty 'primaryUsernameDisplayed', primaryUsernameDisplayed
    systemProperty 'timeout', timeout
    systemProperty 'sauceUser', sauceUser
    systemProperty 'sauceAccessKey', sauceAccessKey
    systemProperty 'mode', mode

    reports.html.enabled = false
    reports.junitXml.destination = 'reports'
    reports.html.destination = 'reports'
}